/* Generated By:JavaCC: Do not edit this line. IrisParserConstants.java */
package org.irislang.jiris.compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface IrisParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FUNCTION = 10;
  /** RegularExpression Id. */
  int CLASS = 11;
  /** RegularExpression Id. */
  int MODULE = 12;
  /** RegularExpression Id. */
  int INTERFACE = 13;
  /** RegularExpression Id. */
  int EXTENDS = 14;
  /** RegularExpression Id. */
  int INVOLVES = 15;
  /** RegularExpression Id. */
  int JOINTS = 16;
  /** RegularExpression Id. */
  int PERSONAL = 17;
  /** RegularExpression Id. */
  int RELATIVE = 18;
  /** RegularExpression Id. */
  int EVERYONE = 19;
  /** RegularExpression Id. */
  int GET = 20;
  /** RegularExpression Id. */
  int SET = 21;
  /** RegularExpression Id. */
  int GSET = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int ELSEIF = 25;
  /** RegularExpression Id. */
  int FOR = 26;
  /** RegularExpression Id. */
  int IN = 27;
  /** RegularExpression Id. */
  int SWITCH = 28;
  /** RegularExpression Id. */
  int WHEN = 29;
  /** RegularExpression Id. */
  int CAST = 30;
  /** RegularExpression Id. */
  int ITERATOR = 31;
  /** RegularExpression Id. */
  int SUPER = 32;
  /** RegularExpression Id. */
  int BREAK = 33;
  /** RegularExpression Id. */
  int CONTINUE = 34;
  /** RegularExpression Id. */
  int RETURN = 35;
  /** RegularExpression Id. */
  int BLOCK = 36;
  /** RegularExpression Id. */
  int SELF = 37;
  /** RegularExpression Id. */
  int WITH = 38;
  /** RegularExpression Id. */
  int WITHOUT = 39;
  /** RegularExpression Id. */
  int ORDER = 40;
  /** RegularExpression Id. */
  int SERVE = 41;
  /** RegularExpression Id. */
  int IGNORE = 42;
  /** RegularExpression Id. */
  int GROAN = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int FALSE = 45;
  /** RegularExpression Id. */
  int NIL = 46;
  /** RegularExpression Id. */
  int ALIAS = 47;
  /** RegularExpression Id. */
  int RETRY = 48;
  /** RegularExpression Id. */
  int REDO = 49;
  /** RegularExpression Id. */
  int GOTO = 50;
  /** RegularExpression Id. */
  int DOT = 51;
  /** RegularExpression Id. */
  int LP = 52;
  /** RegularExpression Id. */
  int RP = 53;
  /** RegularExpression Id. */
  int LC = 54;
  /** RegularExpression Id. */
  int RC = 55;
  /** RegularExpression Id. */
  int LB = 56;
  /** RegularExpression Id. */
  int RB = 57;
  /** RegularExpression Id. */
  int SEMICOLON = 58;
  /** RegularExpression Id. */
  int COMMA = 59;
  /** RegularExpression Id. */
  int LOGICAL_AND = 60;
  /** RegularExpression Id. */
  int LOGICAL_OR = 61;
  /** RegularExpression Id. */
  int LOGICAL_NOT = 62;
  /** RegularExpression Id. */
  int ASSIGN = 63;
  /** RegularExpression Id. */
  int EQ = 64;
  /** RegularExpression Id. */
  int NE = 65;
  /** RegularExpression Id. */
  int GT = 66;
  /** RegularExpression Id. */
  int GE = 67;
  /** RegularExpression Id. */
  int LT = 68;
  /** RegularExpression Id. */
  int LE = 69;
  /** RegularExpression Id. */
  int ADD = 70;
  /** RegularExpression Id. */
  int SUB = 71;
  /** RegularExpression Id. */
  int MUL = 72;
  /** RegularExpression Id. */
  int DIV = 73;
  /** RegularExpression Id. */
  int MOD = 74;
  /** RegularExpression Id. */
  int POWER = 75;
  /** RegularExpression Id. */
  int BIT_AND = 76;
  /** RegularExpression Id. */
  int BIT_OR = 77;
  /** RegularExpression Id. */
  int BIT_XOR = 78;
  /** RegularExpression Id. */
  int BIT_NOT = 79;
  /** RegularExpression Id. */
  int ASSIGN_ADD = 80;
  /** RegularExpression Id. */
  int ASSIGN_SUB = 81;
  /** RegularExpression Id. */
  int ASSIGN_MUL = 82;
  /** RegularExpression Id. */
  int ASSIGN_DIV = 83;
  /** RegularExpression Id. */
  int ASSIGN_MOD = 84;
  /** RegularExpression Id. */
  int ASSIGN_BIT_AND = 85;
  /** RegularExpression Id. */
  int ASSIGN_BIT_OR = 86;
  /** RegularExpression Id. */
  int ASSIGN_BIT_XOR = 87;
  /** RegularExpression Id. */
  int BIT_SHR = 88;
  /** RegularExpression Id. */
  int BIT_SHL = 89;
  /** RegularExpression Id. */
  int BIT_SAR = 90;
  /** RegularExpression Id. */
  int BIT_SAL = 91;
  /** RegularExpression Id. */
  int ASSIGN_BIT_SHR = 92;
  /** RegularExpression Id. */
  int ASSIGN_BIT_SHL = 93;
  /** RegularExpression Id. */
  int ASSIGN_BIT_SAR = 94;
  /** RegularExpression Id. */
  int ASSIGN_BIT_SAL = 95;
  /** RegularExpression Id. */
  int ITER = 96;
  /** RegularExpression Id. */
  int FIELD = 97;
  /** RegularExpression Id. */
  int SHARP = 98;
  /** RegularExpression Id. */
  int CONLON = 99;
  /** RegularExpression Id. */
  int CONSTANCE = 100;
  /** RegularExpression Id. */
  int LOCALVARIABLE = 101;
  /** RegularExpression Id. */
  int GLOBALVARIABLE = 102;
  /** RegularExpression Id. */
  int INSTANCEVARIABLE = 103;
  /** RegularExpression Id. */
  int CLASSVARIABLE = 104;
  /** RegularExpression Id. */
  int UPPERLETTER = 105;
  /** RegularExpression Id. */
  int DOWNERLETTER = 106;
  /** RegularExpression Id. */
  int LETTER = 107;
  /** RegularExpression Id. */
  int DIGIT = 108;
  /** RegularExpression Id. */
  int LEAGLELETTER = 109;
  /** RegularExpression Id. */
  int INTEGER = 110;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 111;
  /** RegularExpression Id. */
  int HEX_LITERAL = 112;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 113;
  /** RegularExpression Id. */
  int FLOAT = 114;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 115;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 116;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 117;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 118;
  /** RegularExpression Id. */
  int STRING = 119;
  /** RegularExpression Id. */
  int UNIQUE_STRING = 120;
  /** RegularExpression Id. */
  int RAW_STRING = 125;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int MULTIPLE_LINE_COMMENT_STATE = 1;
  /** Lexical state. */
  int SINGLE_LINE_COMMENT_STATE = 2;
  /** Lexical state. */
  int RAW_STRING_STATE = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"*/\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 9>",
    "\"fun\"",
    "\"class\"",
    "\"module\"",
    "\"interface\"",
    "\"extends\"",
    "\"involves\"",
    "\"joints\"",
    "\"personal\"",
    "\"relative\"",
    "\"everyone\"",
    "\"get\"",
    "\"set\"",
    "\"gset\"",
    "\"if\"",
    "\"else\"",
    "\"elseif\"",
    "\"for\"",
    "\"in\"",
    "\"switch\"",
    "\"when\"",
    "\"cast\"",
    "\"iterator\"",
    "\"super\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"block\"",
    "\"self\"",
    "\"with\"",
    "\"without\"",
    "\"order\"",
    "\"serve\"",
    "\"ignore\"",
    "\"groan\"",
    "\"true\"",
    "\"false\"",
    "\"nil\"",
    "\"alias\"",
    "\"retry\"",
    "\"redo\"",
    "\"goto\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"**\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"~=\"",
    "\"^=\"",
    "\">>\"",
    "\"<<\"",
    "\">>>\"",
    "\"<<<\"",
    "\">>=\"",
    "\"<<=\"",
    "\">>>=\"",
    "\"<<<=\"",
    "\"=>\"",
    "\"::\"",
    "\"#\"",
    "\":\"",
    "<CONSTANCE>",
    "<LOCALVARIABLE>",
    "<GLOBALVARIABLE>",
    "<INSTANCEVARIABLE>",
    "<CLASSVARIABLE>",
    "<UPPERLETTER>",
    "<DOWNERLETTER>",
    "<LETTER>",
    "<DIGIT>",
    "<LEAGLELETTER>",
    "<INTEGER>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOAT>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<STRING>",
    "<UNIQUE_STRING>",
    "\"@\\\"\"",
    "\"\\\"\\\"\"",
    "\"\\n\"",
    "<token of kind 124>",
    "\"\\\"\"",
  };

}
