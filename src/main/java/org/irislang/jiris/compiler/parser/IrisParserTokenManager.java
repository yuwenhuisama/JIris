/* IrisParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. IrisParserTokenManager.java */
package org.irislang.jiris.compiler.parser;
import org.irislang.jiris.*;
import org.irislang.jiris.compiler.assistpart.*;
import org.irislang.jiris.compiler.expression.*;
import org.irislang.jiris.compiler.statement.*;
import java.io.File;
import java.io.FileInputStream;
import java.util.LinkedList;
import org.apache.commons.lang3.StringEscapeUtils;
import java.util.Stack;

/** Token Manager. */
@SuppressWarnings("unused")public class IrisParserTokenManager implements IrisParserConstants {
   String m_subStr = null;
   IrisIdentifier m_tmpIdentifier = null;
   IrisExpression m_tmpExpression = null;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_2()
{
   return 1;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L || (active1 & 0x80200L) != 0L)
            return 0;
         if ((active0 & 0x7fffffffffc00L) != 0L)
         {
            jjmatchedKind = 101;
            return 9;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 21;
         if ((active1 & 0x200000000000000L) != 0L)
            return 14;
         return -1;
      case 1:
         if ((active0 & 0x7fffff77f5c00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x880a000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x7bffff34ff800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 2;
            }
            return 9;
         }
         if ((active0 & 0x400004300400L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0x1af1f900ff800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 3;
            }
            return 9;
         }
         if ((active0 & 0x610e063400000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x48c920ff000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x1ab1300000800L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x84800ee000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0x40812011000L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x4800ea000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x8000004000L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x4800e8000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 35:
         return jjStopAtPos(0, 98);
      case 37:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 38:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x200000L);
      case 40:
         return jjStopAtPos(0, 52);
      case 41:
         return jjStopAtPos(0, 53);
      case 42:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40800L);
      case 43:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 44:
         return jjStopAtPos(0, 59);
      case 45:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 46:
         return jjStartNfaWithStates_0(0, 51, 21);
      case 47:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x80000L);
      case 58:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 59:
         return jjStopAtPos(0, 58);
      case 60:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xaa000020L);
      case 61:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000001L);
      case 62:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x55000008L);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L);
      case 91:
         return jjStopAtPos(0, 56);
      case 93:
         return jjStopAtPos(0, 57);
      case 94:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1200000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x440000800L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3084000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200004000400L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4080000500000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4008880a000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3000800040000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x22110200000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc020000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 54);
      case 124:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 55);
      case 126:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 38:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 58:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 60:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa8000000L);
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 62:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x54000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200040000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3022800360000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 9);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x801003000800L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xa000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000404011000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x190200000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000400L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 124:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L);
      case 61:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         break;
      case 62:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000001000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2a0480000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010010000L, active1, 0L);
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x202000040000L, active1, 0L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x40400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x81000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x43000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 9);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x500c800006000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x880200040000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x10102006000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 9);
         break;
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 9);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000080080000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000020800L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 9);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x410000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800001000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 9);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x402000000L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 9);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 9);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000020000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 9);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x40800002000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 9);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x50000L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 9);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 9);
         break;
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x400020000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x22000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 9);
         break;
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 9);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 9);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 9);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 9);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 9);
         break;
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 9);
         break;
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(13); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 114)
                        kind = 114;
                     { jjCheckNAddStates(0, 5); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 46)
                     { jjCheckNAdd(21); }
                  else if (curChar == 36)
                     { jjCheckNAdd(11); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(18, 19); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddStates(12, 16); }
                  }
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 36)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAdd(11); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if (curChar == 46)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 23:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(24); }
                  break;
               case 25:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 29:
                  if (curChar == 34 && kind > 119)
                     kind = 119;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 34:
                  if (curChar == 39)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 35:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 37:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 38:
                  if (curChar == 39 && kind > 120)
                     kind = 120;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 41:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAddStates(0, 5); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(47); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(51); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 53:
                  if (curChar != 46)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(57); }
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddStates(12, 16); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(60, 19); }
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(61, 19); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 64:
                  if (curChar == 46)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(68); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(68); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(30, 32); }
                  break;
               case 71:
                  if (curChar == 46)
                     { jjCheckNAdd(72); }
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(74); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(13); }
                  }
                  else if (curChar == 64)
                     { jjCheckNAdd(15); }
                  break;
               case 5:
                  if ((0x7fffffe80000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(9); }
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     { jjCheckNAdd(7); }
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 64)
                     { jjCheckNAdd(13); }
                  break;
               case 1:
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(17, 19); }
                  break;
               case 6:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(9); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 64)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 19:
                  if ((0x100000001000L & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 22:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(33, 34); }
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 27:
                  if (curChar == 92)
                     { jjAddStates(35, 37); }
                  break;
               case 28:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 35:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 36:
                  if (curChar == 92)
                     { jjAddStates(38, 40); }
                  break;
               case 37:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(41, 42); }
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(43, 44); }
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(45, 46); }
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(60, 19); }
                  break;
               case 62:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(63, 64); }
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(63, 64); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 66:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(30, 32); }
                  break;
               case 72:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(17, 19); }
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 123);
      case 34:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_3(0x400000000000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   44, 45, 48, 49, 52, 53, 35, 36, 38, 26, 27, 29, 59, 61, 19, 62, 
   69, 1, 2, 4, 26, 27, 31, 29, 35, 36, 40, 38, 63, 64, 70, 71, 
   72, 23, 24, 28, 30, 32, 37, 39, 41, 46, 47, 50, 51, 56, 57, 65, 
   66, 67, 68, 73, 74, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\146\165\156", 
"\143\154\141\163\163", "\155\157\144\165\154\145", "\151\156\164\145\162\146\141\143\145", 
"\145\170\164\145\156\144\163", "\151\156\166\157\154\166\145\163", "\152\157\151\156\164\163", 
"\160\145\162\163\157\156\141\154", "\162\145\154\141\164\151\166\145", "\145\166\145\162\171\157\156\145", 
"\147\145\164", "\163\145\164", "\147\163\145\164", "\151\146", "\145\154\163\145", 
"\145\154\163\145\151\146", "\146\157\162", "\151\156", "\163\167\151\164\143\150", "\167\150\145\156", 
"\143\141\163\164", "\151\164\145\162\141\164\157\162", "\163\165\160\145\162", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", 
"\142\154\157\143\153", "\163\145\154\146", "\167\151\164\150", "\167\151\164\150\157\165\164", 
"\157\162\144\145\162", "\163\145\162\166\145", "\151\147\156\157\162\145", "\147\162\157\141\156", 
"\164\162\165\145", "\146\141\154\163\145", "\156\151\154", "\141\154\151\141\163", 
"\162\145\164\162\171", "\162\145\144\157", "\147\157\164\157", "\56", "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\46\46", "\174\174", "\41", "\75", "\75\75", "\41\75", 
"\76", "\76\75", "\74", "\74\75", "\53", "\55", "\52", "\57", "\45", "\52\52", "\46", 
"\174", "\136", "\176", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", 
"\176\75", "\136\75", "\76\76", "\74\74", "\76\76\76", "\74\74\74", "\76\76\75", 
"\74\74\75", "\76\76\76\75", "\74\74\74\75", "\75\76", "\72\72", "\43", "\72", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = IrisToken.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 121 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                image.deleteCharAt(0); image.deleteCharAt(0);
         break;
      case 122 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                 image.deleteCharAt(image.length() - 1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 100 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          m_tmpIdentifier = new IrisIdentifier(IrisIdentifier.IdentifierType.Constance, matchedToken.image);
          m_tmpIdentifier.setLineNumber(matchedToken.beginLine);
          ((IrisToken)matchedToken).setSyntaxUnit(m_tmpIdentifier);
         break;
      case 101 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          m_tmpIdentifier = new IrisIdentifier(IrisIdentifier.IdentifierType.LocalVariable, matchedToken.image);
          m_tmpIdentifier.setLineNumber(matchedToken.beginLine);
          ((IrisToken)matchedToken).setSyntaxUnit(m_tmpIdentifier);
         break;
      case 102 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          m_tmpIdentifier = new IrisIdentifier(IrisIdentifier.IdentifierType.GlobalVariable, matchedToken.image);
          m_tmpIdentifier.setLineNumber(matchedToken.beginLine);
          ((IrisToken)matchedToken).setSyntaxUnit(m_tmpIdentifier);
         break;
      case 103 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          m_tmpIdentifier = new IrisIdentifier(IrisIdentifier.IdentifierType.InstanceVariable, matchedToken.image);
          m_tmpIdentifier.setLineNumber(matchedToken.beginLine);
          ((IrisToken)matchedToken).setSyntaxUnit(m_tmpIdentifier);
         break;
      case 104 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          m_tmpIdentifier = new IrisIdentifier(IrisIdentifier.IdentifierType.ClassVariable, matchedToken.image);
          m_tmpIdentifier.setLineNumber(matchedToken.beginLine);
          ((IrisToken)matchedToken).setSyntaxUnit(m_tmpIdentifier);
         break;
      case 110 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    m_tmpExpression = new IrisNativeObjectExpression(Integer.parseInt(matchedToken.image));
    m_tmpExpression.setLineNumber(matchedToken.beginLine);
    ((IrisToken)matchedToken).setSyntaxUnit(m_tmpExpression);
         break;
      case 114 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    m_tmpExpression = new IrisNativeObjectExpression(Double.parseDouble(matchedToken.image));
    m_tmpExpression.setLineNumber(matchedToken.beginLine);
    ((IrisToken)matchedToken).setSyntaxUnit(m_tmpExpression);
         break;
      case 119 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    m_subStr = StringEscapeUtils.unescapeJava(matchedToken.image.substring(1, matchedToken.image.length() - 1));
    m_tmpExpression = new IrisNativeObjectExpression(IrisNativeObjectExpression.NativeObjectType.String, m_subStr);
    m_tmpExpression.setLineNumber(matchedToken.beginLine);
    ((IrisToken)matchedToken).setSyntaxUnit(m_tmpExpression);
         break;
      case 120 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    m_subStr = StringEscapeUtils.unescapeJava(matchedToken.image.substring(1, matchedToken.image.length() - 1));
    m_tmpExpression = new IrisNativeObjectExpression(IrisNativeObjectExpression.NativeObjectType.UniqueString, m_subStr);
    m_tmpExpression.setLineNumber(matchedToken.beginLine);
    ((IrisToken)matchedToken).setSyntaxUnit(m_tmpExpression);
         break;
      case 125 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          image.deleteCharAt(image.length() - 1);
          matchedToken.image = image.toString();
      m_tmpExpression = new IrisNativeObjectExpression(IrisNativeObjectExpression.NativeObjectType.String, matchedToken.image);
      m_tmpExpression.setLineNumber(matchedToken.beginLine);
      ((IrisToken)matchedToken).setSyntaxUnit(m_tmpExpression);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public IrisParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public IrisParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 75; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "MULTIPLE_LINE_COMMENT_STATE",
   "SINGLE_LINE_COMMENT_STATE",
   "RAW_STRING_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
   0, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x218441ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1beL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x100L, 0x0L, 
};
static final long[] jjtoMore = {
   0x240L, 0x1e00000000000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[75];
    private final int[] jjstateSet = new int[2 * 75];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
